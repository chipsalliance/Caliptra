'
' OCP Lock: DERIVE_MEK API sequence diagram showing Caliptra FW/HW interactions
'
'
@startuml

!include utils.inc

note across
    <b>Preconditions:</b>
    * The HEK is present in a KV slot
    * The following sequence has occurred prior: INITIALIZE_MEK_SECRET, then zero or more MIX_MPK
end note

' Pre-existing state
$activate_kv(hek)
$activate_kv(mpk_secret)

dfw -> cfw++ : DERIVE_MEK

cfw -> sek **: Populate SEK from mailbox command
$activate(sek)

cfw -> dpk **: Populate DPK from mailbox command
$activate(dpk)

$preconditioned_key_extract(SEK, sek, HEK, hek, EPK, epk)

$zeroize(sek)

$preconditioned_key_extract(DPK, dpk, EPK, epk, MEK secret seed, mek_secret_seed)

$zeroize(dpk)
$zeroize(epk)

$preconditioned_key_extract(MPK secret, mpk_secret, MEK secret seed, mek_secret_seed, MEK secret, mek_secret)

$zeroize(mek_secret_seed)
$zeroize(mpk_secret)

group Calculate MEK checksum
    cfw -> aes++: Compute MEK checksum
    aes -> mek_secret: Read MEK secret
    aes -> cfw: Write AES-ECB-Encrypt(MEK secret, 0x0000...)
    aes -> cfw: Done
    aes--
end

$kdf(cfw, MEK secret, mek_secret, derivation constant, MEK, mek)

$zeroize(mek_secret)

alt Drive firmware provided a non-zero MEK checksum
    cfw -> cfw: Compare provided checksum with calculated checksum
    note right cfw: Abort the operation if the checksums are not equal.\nOtherwise, proceed to MEK programming.
end

$program_mek()

$zeroize(mek)

cfw -> dfw : Command response\nand MEK checksum\n\
 (Status = Control Reg\n\
                Error field)
cfw--

@enduml
