'
' OCP Lock: Power on sequence diagram showing Caliptra FW/HW interactions
'
'
@startuml

!include utils.inc

!unquoted procedure $zeroize_from_rom($who)
    crom -> $who !! : Zeroize
    $who--
!endprocedure

[->> mrom++ : Power on

group Read the HEK seed
    mrom -> fuses: Read the current HEK mode
    note right mrom: The HEK mode may be 'production' or 'permanent'.

    alt HEK mode is 'production'
        mrom -> fuses: Read the current HEK seed
        note right mrom: The HEK seed may be empty, zeroized, corrupted, or randomized.
    end

    alt HEK mode is 'production' and the current HEK seed is randomized
        mrom -> hek_seed_fuse_reg: Write randomized HEK seed
    else
        mrom -> hek_seed_fuse_reg: Write all-zeroes
    end
end

[->> crom++ : Power on

crom -> aes++: Deobfuscate UDS
crom -> aes: Write UDS IV
aes -> fuses: Read obfuscated UDS seed
aes -> uds ** : Write AES-CBC-Decrypt(obfuscation key, IV, obfuscated seed)
$activate_kv(uds)
aes -> crom: Done
aes--

$kdf(crom, DICE UDS, uds, derivation constant, IDevID CDI, idev)
$zeroize_from_rom(uds)

group Derive the HEK
    crom -> hek_seed_fuse_reg: Read HEK seed
    $kdf(crom, IDevID CDI, idev, HEK seed, HEK, hek)
end

group Derive the MDK
    $kdf(crom, IDevID CDI, idev, derivation constant, MDK, mdk)
end

== Continue with the boot process ==

$zeroize_from_rom(idev)

mrom -> mrom: Await mailbox commands

group Report HEK metadata
    mrom -> crom: REPORT_HEK_METADATA
    crom -> lifecycle: Read Caliptra lifecycle

    alt lifecycle == Unprovisioned or Manufacturing
        crom -> crom: Note that the HEK is enabled. Leave it in Key Vault.
    else lifecycle == Production and (HEK seed is randomized or HEK mode is permanent)
        crom -> crom: Note that the HEK is enabled. Leave it in Key Vault.
    else lifecycle == Production and HEK seed is neither randomized nor permanent
        crom -> crom: Note that the HEK is disabled.
        $zeroize_from_rom(hek)
    end

    crom -> mrom: Done
end

crom -> crom: set ocp_lock_ctrl=1

crom -> cfw++ : FMC and runtime firmware boots
crom--

== Initialize an HPKE keypair for each algorithm supported ==

cfw -> drbg: Get a random 384-bit\n\
 private key seed for\n\
 DHKEM(P-384, HKDF-SHA384)
cfw -> drbg: Get a random 384-bit\n\
 private key seed for\n\
 the ECDH portion of\n\
 QSF-KEM(ML-KEM-1024, P-384)
cfw -> drbg: Get a random 512-bit\n\
 private key seed for\n\
 the ML-KEM portion of\n\
 QSF-KEM(ML-KEM-1024, P-384)

cfw -> hpke **: Stash random seeds in memory
$activate(hpke)

@enduml
