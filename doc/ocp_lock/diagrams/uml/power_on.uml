'
' OCP Lock: Power on sequence diagram showing Caliptra FW/HW interactions
'
'
@startuml

!include utils.inc

!unquoted procedure $zeroize_from_rom($who)
    crom -> $who !! : Zeroize
    $who--
!endprocedure

[->> crom++ : Power on

crom -> aes++: Deobfuscate UDS
crom -> aes: Write UDS IV
aes -> fuses: Read obfuscated UDS seed
aes -> uds ** : Write AES-CBC-Decrypt(obfuscation key, IV, obfuscated seed)
$activate_kv(uds)
aes -> crom: Done
aes--

$kdf(crom, DICE UDS, uds, derivation constant, IDevID CDI, idev)

$zeroize_from_rom(uds)

== Derive the HEK ==

group Read the HEK seed
    crom -> fuses: Read HEK mode from fuses

    alt if in pre-production mode
        crom -> crom: HEK mode = PREPRODUCTION_HEK,\nHEK seed = 0x0000...
    else if in perma-HEK mode
        crom -> crom: HEK mode = PERMA_HEK,\nHEK seed = 0x0000...
    else if randomized HEK seed is present in fuses
        crom -> crom: HEK mode = PRODUCTION_HEK,\nHEK seed = [read from fuses]
    else No HEK seed is available
        crom -> crom: Note the absence of the HEK seed
    end
end

alt HEK seed is available
    $kdf(crom, IDevID CDI, idev, HEK mode || HEK seed, HEK, hek)
end

== Derive the MDK ==

$kdf(crom, IDevID CDI, idev, derivation constant, MDK, mdk)

== Continue with the boot process ==

$zeroize_from_rom(idev)

crom -> cfw++ : FMC and runtime firmware boots
crom--

== Initialize an HPKE keypair for each algorithm supported ==

cfw -> drbg: Get a random 384-bit\n\
 private key seed for\n\
 DHKEM(P-384, HKDF-SHA384)
cfw -> drbg: Get a random 384-bit\n\
 private key seed for\n\
 the ECDH portion of\n\
 QSF-KEM(ML-KEM-1024, P-384)
cfw -> drbg: Get a random 512-bit\n\
 private key seed for\n\
 the ML-KEM portion of\n\
 QSF-KEM(ML-KEM-1024, P-384)

cfw -> hpke **: Stash random seeds in memory
$activate(hpke)

@enduml
