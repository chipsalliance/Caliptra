'
' OCP Lock: Power on sequence diagram showing Caliptra FW/HW interactions
'
'
@startuml

!include utils.inc

!unquoted procedure $zeroize_from_rom($who)
    crom -> $who !! : Zeroize
    $who--
!endprocedure

[->> crom++ : Power on

crom -> aes++: Deobfuscate UDS
crom -> aes: Write UDS IV
aes -> fuses: Read obfuscated UDS seed
aes -> uds ** : Write AES-CBC-Decrypt(obfuscation key, IV, obfuscated seed)
$activate_kv(uds)
aes -> crom: Done
aes--

$kdf(crom, DICE UDS, uds, derivation constant, IDevID CDI, idev)

$kdf(crom, IDevID CDI, idev, derivation constant, Runtime Deobfuscation Key, rt_deobf_key)

crom -> crom: Continue with deriving other DICE secrets

$zeroize_from_rom(uds)
$zeroize_from_rom(idev)

crom -> cfw++ : FMC and runtime firmware boots
crom--

== Initialize the HEK if available ==

cfw -> fuses: Read HEK mode from fuses

alt if in pre-production mode
    cfw -> cfw: HEK IV = PREPRODUCTION_HEK_IV
    cfw -> cfw: HEK seed = 0x0000...
else if in perma-HEK mode
    cfw -> cfw: HEK IV = PRODUCTION_HEK_IV
    cfw -> cfw: HEK seed = 0x0000...
else if randomized HEK seed is present in fuses
    cfw -> cfw: HEK IV = PERMA_HEK_IV
    cfw -> fuses: Read HEK seed from fuses
else No HEK seed is available
    cfw -> cfw: Note the absence of the HEK seed
end

alt HEK seed is available
    $rt_deobfuscate(HEK seed, cfw, hek)
end

== Initialize an HPKE keypair for each algorithm supported ==

cfw -> drbg: Get a random 384-bit\n\
 private key seed for\n\
 DHKEM(P-384, HKDF-SHA384)
cfw -> drbg: Get a random 384-bit\n\
 private key seed for\n\
 the ECDH portion of\n\
 QSF-KEM(ML-KEM-1024, P-384)
cfw -> drbg: Get a random 512-bit\n\
 private key seed for\n\
 the ML-KEM portion of\n\
 QSF-KEM(ML-KEM-1024, P-384)

cfw -> hpke **: Stash random seeds in memory
$activate(hpke)

@enduml
