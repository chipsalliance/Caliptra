'
' OCP Lock: GENERATE_PMEK API sequence diagram showing Caliptra FW/HW interactions
'
'
@startuml

!include ocp_lock_utils.inc

!if ($show_title)
    Title "Generate PMEK"
!endif

!if ($show_precond)
    note across
        <b>Preconditions:</b>
          * FEK in a firmware-managed KV slot
          * KEM Keypair in a firmware-managed KV slot

        <b>Notes:</b>
          * The sequence diagram assumes that the KV will not allow an input KV slot to also be used as an out KV slot. Caliptra FW is responsible for managing which KV slots are used and can adapt if this assumption is not correct.
          * This sequence is focused on successful execution of operations by the KV.
    end note
!endif

' Pre-existing state
fek++ $BUFFER_ACTIVATION
kemg++ $BUFFER_ACTIVATION

fw $async mb++ : GENERATE_PMEK

!if ($show_api)
    note right mb
        | <b>Field           | <b>Size          | <b>Definition |
        | chksum             | u32              | Little endian |
        | pmek_algorithms    | u32              | Indicates the size of PMEKs. Only one bit shall be reported.\n   * Byte 0 bit 0: 256 bits |
        | wrapped_access_key | WrappedAccessKey | KEM-wrapped access key\n   * access_key_algorithm\n   * kem_handle\n   * kem_algorithm\n   * kem_ciphertext\n   * encrypted_access_key |
    end note
!endif

mb $async cfw++ : Command

!if ($show_msg_parsing)
    cfw $sync mb : Get command
    mb--
    $self("cfw", "Determine command")
!else
    mb--
!endif

cfw $sync kv++: Decaps(KEM Pair : kem_handle (G),\n             KEM ciphertext : kem_ciphertext\n             Destination : Slot Y)
kv $sync kemg: Get KEM Keypair
kv $sync kv: Decap KEM Ciphertext with Keypair
kv $sync tempy: Put Shared Secret
tempy++ $BUFFER_ACTIVATION
!if ($show_done)
    kv $sync cfw-- : done
!else
    kv--
!endif


cfw $sync kv++: Key_Unwrap(Key : Slot Y,\n                   Data: encrypted_access_key\n                   Destination : Slot Z)
kv $sync tempy: Get Shared Secret
kv $sync kv: Key_Unwrap encrypted_access_key with Key
kv $sync tempz: Put Access Key
tempz++ $BUFFER_ACTIVATION
!if ($show_done)
    kv $sync cfw-- : done
!else
    kv--
!endif


alt pmek algorithm 256 bits
    cfw $sync kv++: HMAC512_Slots(Key : Slot A,\n                         Data Key : Slot Z\n                         Destination :  Slot Y)
    kv $sync fek: Get FEK
    kv $sync tempz: Get Access Key
    kv $sync kv: HMAC512 slot A and Slot Z
    kv $sync tempy: Put HMAC512 result Encryption Key
    !if ($show_done)
        kv $sync cfw-- : done
    !else
        kv--
    !endif
end

cfw $sync kv++: new_key(len: pmek_alogorithm length,\n              Destination Slot: Z)
    kv $sync rand: Get random limited\nto len of PMEK algorithm
    kv $sync tempz: Put new PMEK
    !if ($show_done)
        kv $sync cfw-- : done
    !else
        kv--
    !endif

cfw $sync kv++: Wrap(Key: Slot Y,\n          Data Key : Slot Z\n          Destination : locked_pmek)
kv $sync tempy: Get Encryption Key
kv $sync tempz: Get new PMEK
kv $sync kv: Encrypt Data Key using Key
!if ($show_done)
    kv $sync cfw-- : Locked PMEK
!else
    kv--
!endif

cfw $sync kv++: Purge_key(Key: Slot Y,\n                Key : Slot Z)
kv $sync tempy !! : Purge
& kv $sync tempz !!
!if ($show_done)
    kv $sync cfw-- : done
!else
    kv--
!endif


cfw $sync mb : Command response and\nLocked PMEK
& mb $async fw++ : Command\ncomplete

!if ($show_api)
    note right mb
        | <b>Field           | <b>Size       | <b>Definition |
        | chksum             | u32           | Little endian |
        | fips_status        | u32           | Indicates if the command is FIPS approved or an error |
        | new_encrypted_pmek | EncryptedPmek | PMEK encrypted to access_key_2 |
    end note
!endif
cfw--
kv--

@enduml
