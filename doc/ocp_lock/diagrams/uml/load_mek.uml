'
' OCP Lock: LOAD_MEK API sequence diagram showing Caliptra FW/HW interactions
'
'
@startuml

!include utils.inc

note across
    <b>Preconditions:</b>
    * The HEK is present in a KV slot
    * The following sequence has occurred prior: INITIALIZE_MEK_SECRET, then zero or more MIX_MPK
end note

' Pre-existing state
$activate_kv(hek)
$activate_kv(mdk)
$activate_kv(mpk_secret)

dfw -> cfw++ : LOAD_MEK

cfw -> sek **: Populate SEK from mailbox command
$activate(sek)

cfw -> dpk **: Populate DPK from mailbox command
$activate(dpk)

$preconditioned_key_extract(SEK, sek, HEK, hek, EPK, epk)

$zeroize(sek)

$preconditioned_key_extract(DPK, dpk, EPK, epk, MEK secret seed, mek_secret_seed)

$zeroize(dpk)
$zeroize(epk)

$preconditioned_key_extract(MPK secret, mpk_secret, MEK secret seed, mek_secret_seed, MEK secret, mek_secret)

$zeroize(mek_secret_seed)
$zeroize(mpk_secret)

$preconditioned_aes_decrypt(mek_secret, encryption_key, double-encrypted MEK, cfw)

group Perform inner MEK decryption
    cfw -> aes++: Decrypt single-encrypted MEK
    cfw -> aes: Write single-encrypted MEK
    aes -> mdk: Read encryption key
    aes -> mek **: Write AES-ECB-Decrypt(encryption key, single-encrypted MEK)
    $activate_kv(mek)
    aes -> cfw: Done
    aes--
end

$program_mek()

$zeroize(mek)

cfw -> dfw : Command response\n\
 (Status = Control Reg\n\
                Error field)
cfw--

@enduml
