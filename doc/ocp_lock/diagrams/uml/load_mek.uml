'
' OCP Lock: LOAD_MEK API sequence diagram showing Caliptra FW/HW interactions
'
'
@startuml

!include ocp_lock_utils.inc

note across
    <b>Preconditions:</b>
    * The following sequence may or may not have occurred prior: Zero or more MIX_MPK commands

    <b>Notes:</b>
        * The sequence diagram assumes that the KV will not allow an input KV slot to also be used as an out KV slot. Caliptra FW is responsible for managing which KV slots are used and can adapt if this assumption is not correct.
        * This sequence is focused on successful execution of operations by the KV.
end note

hek++ $BUFFER_ACTIVATION
sfr++

fw $async mb++ : LOAD_MEK

mb $async cfw++ : Command
mb--

$self("cfw", "Use KV Slot X for deriving MEK")

alt HEK exists and the encryption engine has become ready

    alt MEK is not initialized (i.e., no MPK in the final MEK)
        cfw $sync kv++: HMAC512(Key: Slot A,\n                Key Data: "MEK Secret Seed",\n                Destination: Slot X)
        kv $sync hek: Get HEK
        kv $sync kv: HMAC512 slot A with Data
        kv $sync meks: HMAC512 result MEK Secret Seed with HEK
        meks++ $BUFFER_ACTIVATION
        kv $sync cfw-- : done
    end

    cfw $sync kv++: HMAC512(Key string : sek,\n                Data String: dpk,\n                Destination : Slot Y)
    kv $sync kv: HMAC512(SEK, DPK)
    kv $sync tempy: HMAC512 result pre-MEK
    tempy++ $BUFFER_ACTIVATION
    kv $sync cfw-- : done

    cfw $sync kv++: HMAC512(Key : pre-MEK,\n                Data: MEK Secret Seed,\n                Destination : Slot Y)
    kv $sync meks: Get MEK Secret Seed
    kv $sync kv: HMAC512(pre-MEK, MEK Secre Seed)
    kv $sync tempy: HMAC512 result MEK
    tempy++ $BUFFER_ACTIVATION
    kv $sync cfw-- : done

    cfw $sync sfr : Read Control Reg

    alt (DN == 1b || ERR == 1b || EXE == 1b)
        cfw $sync sfr : Write Control Reg (DN = 1b)

        cfw $sync cfw : Start timeout
        cfw $sync sfr : Read Control Reg
        group loop until (rdy_timeout or (DN == 0b && ERR == 0b && EXE == 0b)

            cfw $sync sfr : Read Control Reg
        end
    end

    group in any order
        cfw $async dma++ : MEK Write (Slot: Y)
        dma $sync tempy : Read MEK
        dma $sync sfr : Write MEK
        note left sfr
            If the encryption engine uses an MEK which is smaller than the MEK
            then the encryption engine truncates the MEK
        end note
        dma $async cfw-- : complete

        cfw $sync sfr : Write Aux
        cfw $sync sfr : Write Metadata
    end

    cfw $sync sfr : Write Control Reg (CMD = Load_MEK, DN = 0, EXE = 1)

    cfw $sync cfw : Start timeout

    cfw $sync sfr : Read Control Reg

    group loop until (cmd_timeout or DN = 1b)
        ee $sync sfr-- : Write Control Reg\n(DN = 1b,\n ERR = 0b,\n EXE = 0b)
        cfw $sync sfr : Read Control Reg
    end
    sfr--

    cfw $sync sfr : Write Control Reg (DN = 1b)
    note left sfr: Reset the SFR interface for next operation - not waiting for response

    $self("cfw", "Mark that the sequence\nof an Initialize MEK then\nzero or more MIX_MPK sequence\n is completed")
end

cfw $sync kv++: Purge_key(Key: Slot X,\n                Key : Slot Y)
kv $sync meks !! : Purge
& kv $sync tempy !!
kv $sync cfw-- : done

cfw $async mb : Command\nresponse\n(Status = Control Reg\n               Error field)
& mb $async fw++ : Command\ncomplete
cfw--

@enduml
